/**
 * üì¶ "Î≤Ω Î∂ÄÏàòÍ≥† Ïù¥ÎèôÌïòÍ∏∞ (ÏµúÎåÄ 1Ìöå Í∞ÄÎä•)"
 * üß© Î¨∏Ï†ú ÏÑ§Î™Ö (ÏöîÏïΩ):
 * 0: Îπà Ïπ∏
 * 
 * 1: Î≤Ω
 * 
 * (0, 0)ÏóêÏÑú Ï∂úÎ∞úÌï¥ÏÑú (n-1, m-1)Î°ú Ïù¥ÎèôÌï¥Ïïº Ìï¥
 * 
 * Ïù¥ÎèôÏùÄ ÏÉÅÌïòÏ¢åÏö∞
 * 
 * Îã®! Î≤ΩÏùÑ ÏµúÎåÄ Ìïú Î≤àÍπåÏßÄ Î∂ÄÏà† Ïàò ÏûàÏñ¥
 * 
 * ‚úÖ Ï∂úÎ†•:
 * ÏµúÎã® Í±∞Î¶¨(Ïπ∏ Ïàò)
 * 
 * Ïù¥ÎèôÏù¥ Î∂àÍ∞ÄÎä•ÌïòÎ©¥ -1
 * 
 * üî• Ìè¨Ïù∏Ìä∏:
 * Ìïú Ï¢åÌëúÏóêÏÑúÎèÑ Î≤ΩÏùÑ Î∂ÄÏàú ÏÉÅÌÉú / Î∂ÄÏàòÏßÄ ÏïäÏùÄ ÏÉÅÌÉúÎ•º ÎÇòÎà†ÏÑú Î∞©Î¨∏ Ï≤òÎ¶¨Ìï¥Ïïº Ìï®!
 * 
 * Îî∞ÎùºÏÑú visited[y][x][0 or 1] ÌòïÌÉúÏùò 3Ï∞®Ïõê visited Î∞∞Ïó¥ÏùÑ ÏÇ¨Ïö©Ìï¥Ïïº Ìï¥
 */

/**
 * @param { number[][] } grid
 */
function solution(grid) {
  const directions = [
    { x: 0, y: -1 },
    { x: 0, y: 1 },
    { x: -1, y: 0 },
    { x: 1, y: 0 },
  ];

  const plannedGridInfos = [
    grid.map(row => {
      return row.map(col => ({
        isVisited: false,
        isWall: col === 1,
      }));
    }),
  ];

  grid.forEach((row, y) => {
    row.forEach((col, x) => {
      if (col === 1) {
        const plannedGridInfo = grid.map(row => {
          return row.map(col => ({
            isWall: col === 1,
            isVisited: false,
          }));
        });

        plannedGridInfo[y][x].isWall = false;
        plannedGridInfos.push(plannedGridInfo);
      }
    });
  });

  const MAX_X = grid[0].length - 1;
  const MAX_Y = grid.length - 1;

  let minElapsedTime = null;

  for (const gridInfo of plannedGridInfos) {
    const queue = [
      {
        x: 0,
        y: 0,
        elapsedTime: 1,
      },
    ];

    while (queue.length) {
      const {
        x,
        y,
        elapsedTime,
      } = queue.shift();

      if (x === MAX_X && y === MAX_Y) {
        minElapsedTime = minElapsedTime === null
          ? elapsedTime
          : Math.min(elapsedTime, minElapsedTime);

        continue;
      }

      for (const direction of directions) {
        const nextX = x + direction.x;
        const nextY = y + direction.y;

        if (nextX < 0 || nextX > MAX_X || nextY < 0 || nextY > MAX_Y) {
          continue;
        }

        const nextInfo = gridInfo[nextY][nextX];

        if (nextInfo.isWall || nextInfo.isVisited) {
          continue;
        }

        nextInfo.isVisited = true;

        queue.push({
          x: nextX,
          y: nextY,
          elapsedTime: elapsedTime + 1,
        });
      }
    }
  }

  return minElapsedTime === null
    ? -1
    : minElapsedTime;
}

const questions = [
  {
    grid: [
      [0, 1, 0, 0, 0],
      [0, 1, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0],
    ],
    answer: 9,
  },
];

questions.forEach(question => {
  const {
    grid,
    answer,
  } = question;

  const result = solution(grid);

  console.group('Î≤Ω Î∂ÄÏàòÍ≥† Ïù¥ÎèôÌïòÍ∏∞ (ÏµúÎåÄ 1Ìöå Í∞ÄÎä•)');
  console.log('grid: ', grid);
  console.log('answer: ', answer);
  console.log('result: ', result);
  console.log('pass: ', result === answer);
  console.groupEnd();
});
