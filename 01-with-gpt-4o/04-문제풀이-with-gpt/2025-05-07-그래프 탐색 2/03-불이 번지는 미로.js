/**
 * üßØüî• ‚ÄúÎ∂àÏù¥ Î≤àÏßÄÎäî ÎØ∏Î°ú‚Äù Î¨∏Ï†úÏïº!
 * üìò Î¨∏Ï†ú ÏÑ§Î™Ö:
 * 2Ï∞®Ïõê ÎØ∏Î°úÍ∞Ä ÏûàÏñ¥.
 * 
 * #: Î≤Ω, .: Îπà Í≥µÍ∞Ñ, F: Î∂à, J: Ï£ºÏù∏Í≥µ(ÏßÄÌõàÏù¥)
 * 
 * Î∂àÏùÄ Îß§ Ï¥àÎßàÎã§ ÏÉÅÌïòÏ¢åÏö∞Î°ú Î≤àÏ†∏.
 * 
 * ÏßÄÌõàÏù¥Îäî Îß§ Ï¥àÎßàÎã§ Ìïú Ïπ∏ Ïù¥ÎèôÌï† Ïàò ÏûàÏñ¥.
 * 
 * Î∂àÎ≥¥Îã§ Î®ºÏ†Ä ÎèÑÏ∞©Ìï¥Ïïº Ìï®.
 * 
 * ÏßÄÌõàÏù¥Í∞Ä ÎØ∏Î°ú Î∞îÍπ•ÏúºÎ°ú ÌÉàÏ∂úÌï† Ïàò ÏûàÎäî ÏµúÏÜå ÏãúÍ∞ÑÏùÑ Íµ¨ÌïòÎùº.
 * 
 * ÎßåÏïΩ Î∂àÏù¥ ÌçºÏßÄÍ∏∞ Ï†ÑÏóê ÌÉàÏ∂úÌï† Ïàò ÏóÜÎã§Î©¥ IMPOSSIBLEÏùÑ Ï∂úÎ†•Ìï¥.
 * 
 * üéØ Î™©Ìëú:
 * Î∂àÏùÄ Ïó¨Îü¨ ÏúÑÏπòÏóêÏÑú ÎèôÏãúÏóê Î≤àÏßÄÎ©∞ BFSÎ°ú Ï≤òÎ¶¨Ìï¥Ïïº Ìï¥.
 * 
 * ÏßÄÌõàÏù¥Îäî Î∂àÎ≥¥Îã§ Î®ºÏ†Ä ÎèÑÏ∞©Ìï¥Ïïº ÌïòÎØÄÎ°ú Î∂àÏù¥ Ïñ∏Ï†ú ÎèÑÎã¨ÌïòÎäîÏßÄÎ•º Î®ºÏ†Ä Í≥ÑÏÇ∞Ìï¥Ïïº Ìï¥!
 * 
 * Í∑∏Î¶¨Í≥† ÏßÄÌõàÏù¥Í∞Ä Ïù¥ÎèôÌï† Ïàò ÏûàÎäî Í≤ΩÎ°ú Ï§ë Î∂àÎ≥¥Îã§ Î®ºÏ†Ä ÎèÑÏ∞©ÌïòÎäî Í≤ΩÎ°úÍ∞Ä ÏûàÎäîÏßÄ ÌåêÎã®Ìï¥Ïïº Ìï¥.
 * 
 * ‚úÖ Ï∂úÎ†• ÏòàÏãú:
 * ÏµúÏÜå ÌÉàÏ∂ú ÏãúÍ∞Ñ (Ïòà: 5)
 * 
 * ÌòπÏùÄ ÌÉàÏ∂ú Î∂àÍ∞ÄÎä• Ïãú "IMPOSSIBLE"
 */

const FIRE = 'F';
const WALL = '#';
const EMPTY = '.';
const PERSON = 'J';

/**
 * @param { number[][] } maze
 */
function solution(maze) {
  const directions = [
    { x: 0, y: -1 },
    { x: 0, y: 1 },
    { x: -1, y: 0 },
    { x: 1, y: 0 },
  ];

  const MAX_X = maze[0].length - 1;
  const MAX_Y = maze.length - 1;

  const fireQueue = [];
  const personQueue = [];

  const fireInfos = maze.map((row, y) => {
    return row.map((col, x) => {
      if (col === FIRE) {
        fireQueue.push({
          x,
          y,
        });
      }

      if (col === PERSON) {
        personQueue.push({
          x,
          y,
          elapsedTime: 0,
        });
      }

      return {
        isWall: col === WALL,
        isVisited: col === PERSON,
        isExit: y === 0 
          || y === MAX_Y
          || x === 0
          || x === MAX_X,
        fireTime: col === FIRE
          ? 0
          : -1,
      };
    });
  });

  while (fireQueue.length) {
    const {
      x,
      y,
    } = fireQueue.shift();

    const currentInfo = fireInfos[y][x];

    directions.forEach(direction => {
      const nextX = x + direction.x;
      const nextY = y + direction.y;

      if (nextX < 0 || nextX > MAX_X || nextY < 0 || nextY > MAX_Y) {
        return;
      }

      const nextInfo = fireInfos[nextY][nextX];

      if (nextInfo.isWall || nextInfo.fireTime >= 0) {
        return;
      }

      nextInfo.fireTime = currentInfo.fireTime + 1;

      fireQueue.push({
        x: nextX,
        y: nextY,
      });
    });
  }

  while (personQueue.length) {
    const {
      x,
      y,
      elapsedTime,
    } = personQueue.shift();

    const currentFireInfo = fireInfos[y][x];

    if (currentFireInfo.isExit) {
      return elapsedTime;
    }

    directions.forEach(direction => {
      const nextX = x + direction.x;
      const nextY = y + direction.y;

      if (nextX < 0 || nextX > MAX_X || nextY < 0 || nextY > MAX_Y) {
        return;
      }

      const nextFireInfo = fireInfos[nextY][nextX];
      const nextElapsedTime = elapsedTime + 1;

      if (nextFireInfo.isWall || nextFireInfo.isVisited || nextFireInfo.fireTime <= nextElapsedTime) {
        return;
      }

      personQueue.push({
        x: nextX,
        y: nextY,
        elapsedTime: nextElapsedTime,
      });
    });
  }

  return 'IMPOSSIBLE';
}

const questions = [
  {
    maze: [
      ['#', '#', '#', '#', '#'],
      ['#', 'J', '.', '.', '#'],
      ['#', '.', '#', '.', '#'],
      ['#', '.', '.', 'F', '.'],
      ['#', '#', '#', '#', '#'],
    ],
    answer: 'IMPOSSIBLE',
  },
  {
    maze: [
      ['#', '#', '#', '#', '#'],
      ['.', '.', '.', 'J', '#'],
      ['.', '.', '#', '.', '#'],
      ['F', '.', '#', '.', '#'],
      ['.', '.', '.', '.', '.'],
      ['#', '#', '#', '#', '#'],
    ],
    answer: 4,
  },
];

questions.forEach(question => {
  const {
    maze,
    answer,
  } = question;

  const result = solution(maze);

  console.group('Î∂àÏù¥ Î≤àÏßÄÎäî ÎØ∏Î°ú');
  console.log('maze: ', maze);
  console.log('answer: ', answer);
  console.log('result: ', result);
  console.log('pass: ', result === answer);
  console.groupEnd();
});
